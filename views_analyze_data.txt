

# Moving Average to DB.IrregularStocksDates

def analyze_volume_data(): 
    multiplier = 2         
    ticker_unique = Stock.objects.order_by().values_list("ticker").distinct()

    for ticker in ticker_unique:
        ticker = ticker[0]
        amount_of_rows_per_stock = Stock.objects.filter(ticker=ticker).count()

        for period in range(amount_of_rows_per_stock//40):
            offset = 40*period
            limit = 40*(period+1)
            print(f'From {offset} to {limit}')
            filtered_stocks = Stock.objects.filter(
                ticker__icontains=ticker).order_by("-time")[offset:limit]
            avg_volume = filtered_stocks.aggregate(Avg("volume"))[
                "volume__avg"]
            print("The Average is: ", avg_volume)
            value_to_check = float(avg_volume) * float(multiplier)
            data_to_response = Stock.objects.filter(
                volume__gte=value_to_check,ticker__icontains=ticker).order_by("-time")[offset:limit]

            for row in data_to_response:
                already_existed = IrregularStocksDates.objects.filter(ticker=ticker,time=row.time)
                if already_existed:
                    continue
                IrregularStocksDates.objects.create(
                    ticker=ticker,
                    volume=row.volume,
                    avg_volume=avg_volume,
                    time=row.time
                )
                print("ADDED IRREGULAR ROW TO ", ticker)
    return print("Done analyzing the data")



# Moving Average and Standard deviation to DB.IrregularStocksDates2

def analyze_volume_data2(): 
    multiplier = 10         
    ticker_unique = Stock.objects.order_by().values_list("ticker").distinct()

    for ticker in ticker_unique:
        ticker = ticker[0]
        amount_of_rows_per_stock = Stock.objects.filter(ticker=ticker).count()

        for period in range(amount_of_rows_per_stock//30):
            offset = 30*period
            limit = 30*(period+1)
            print(f'From {offset} to {limit}')
            filtered_stocks = Stock.objects.filter(
                ticker=ticker).order_by("-time")[offset:limit]
            avg_volume = filtered_stocks.aggregate(Avg("volume"))[
                "volume__avg"]
            dev_volume = filtered_stocks.aggregate(StdDev("volume"))[
                "volume__stddev"]
            print("The Average is: ", avg_volume, "The Deviation is: ", dev_volume)
            print(avg_volume) 
            value_to_check = float(dev_volume) * float(multiplier) + float(avg_volume)
            data_to_response = Stock.objects.filter(
                volume__gte=value_to_check,ticker=ticker).order_by("-time")[offset:limit]

            for row in data_to_response:
                already_existed = IrregularStocksDates10.objects.filter(ticker=ticker,time=row.time)
                if already_existed:
                    continue
                IrregularStocksDates2.objects.create(
                    ticker=ticker,
                    volume=row.volume,
                    avg_volume=avg_volume,
                    dev_volume=dev_volume,
                    time=row.time
                )
                print("ADDED IRREGULAR ROW TO ", ticker)
    return print("Done analyzing the data")
